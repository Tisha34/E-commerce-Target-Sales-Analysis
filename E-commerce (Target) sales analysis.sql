create database Target;
drop database Target;


# Basic Querries
#1 List all unique cities where customers are located.
use Target;
select distinct customer_city from customers;

#2 Count the number of orders placed in 2017.
select count(order_purchase_timestamp) from orders;

#3  Find the total sales per category.
SELECT 
    p.product_category,
    ROUND(SUM(s.payment_value), 0) AS Total_sales
FROM
    products AS p
        JOIN
    order_items AS o ON o.product_id = p.product_id
        JOIN
    payments AS s ON o.order_id = s.order_id
GROUP BY p.product_category;

#4 Calculate the percentage of orders that were paid in installments.
SELECT 
    SUM(CASE
        WHEN payment_installments > 1 THEN 1
        ELSE 0
    END) / COUNT(payment_installments) * 100 AS installments
FROM
    payments;

#5 Count the number of customers from each state. 
select customer_state,count(customer_id) as Total_Customers from customers group by customer_state;

# Intermediate Queries
#6 Calculate the number of orders per month in 2018.
SELECT 
    MONTHNAME(order_purchase_timestamp) AS Month,
    COUNT(order_id) AS Order_count
FROM
    orders
WHERE
    YEAR(order_purchase_timestamp) = 2018
GROUP BY Month
ORDER BY Order_count;

#7 Find the average number of products per order, grouped by customer city.
with count_per_order as (select o.customer_id,o.order_id,count(i.order_id) as OC from orders as o join order_items as i on 
o.order_id=i.order_id GROUP BY  o.order_id,o.customer_id)
SELECT 
    c.customer_city, ROUND(AVG(co.OC), 2) AS Average_Order
FROM
    customers AS c
        JOIN
    count_per_order AS co ON co.customer_id = c.customer_id
GROUP BY c.customer_city;

#8 Calculate the percentage of total revenue contributed by each product category.
SELECT 
    products.product_category AS product_category,
    ROUND((SUM(payments.payment_value) / (SELECT 
                    SUM(payment_value)
                FROM
                    payments)) * 100,2) 
				AS total_revenue
FROM
    products
        JOIN
    order_items ON order_items.product_id = products.product_id
        JOIN
    payments ON payments.order_id = order_items.order_id
GROUP BY product_category
order by total_revenue desc;

#9 Identify the correlation between product price and the number of times a product has been purchased.
SELECT 
    p.product_category,
    COUNT(o.product_id) AS Count_of_Orders,
    ROUND(AVG(o.price), 2) AS Avg_Price
FROM
    products AS p
        JOIN
    order_items AS o ON p.product_id = o.product_id
GROUP BY p.product_category
ORDER BY Count_of_Orders DESC;

#10 Calculate the total revenue generated by each seller, and rank them by revenue.
select * , dense_rank() over (order by Total_Revenue desc) as 'Dense_Rank' from
(select o.seller_id,round(sum(p.payment_value),0) as Total_Revenue from 
order_items as o join payments as p on
o.order_id = p.order_id group by o.seller_id) as a;

# Advanced Queries
#11 Calculate the moving average of order values for each customer over their order history.
select customer_id,order_purchase_timestamp,payment,
Avg(payment) over(partition by customer_id order by order_purchase_timestamp 
rows between 2 preceding and current row) as Moving_Avg 
from
(select o.customer_id,o.order_purchase_timestamp,p.payment_value as payment
from orders as o join payments as p on o.order_id=p.order_id) as a;

#12. Calculate the cumulative sales per month for each year.
select years,months,sum(payment)
over (order by years,months) as Cumulative_sales
from
(select year(o.order_purchase_timestamp) as Years,
monthname( o.order_purchase_timestamp) as Months,
round(sum(p.payment_value),2) as payment
from orders as o join payments as p on o.order_id=p.order_id
group by years,months ) as a;

#13. Calculate the year-over-year growth rate of total sales.

with a as (select year(o.order_purchase_timestamp) as Years,
round(sum(p.payment_value),2) as payment
from orders as o join payments as p on o.order_id=p.order_id
group by years) 
select years, ((payment - lag(payment) over(order by years))/
lag(payment) over(order by years)) * 100 as YOY_Growth_Rate from a;

#14. Calculate the retention rate of customers, defined as the percentage of customers 
#who make another purchase within 6 months of their first purchase.

# step 1 ---- find first_order date of each customer
with a as (select c.customer_id,min(o.order_purchase_timestamp) as first_order
from orders as o 
join customers as c on o.customer_id=c.customer_id group by c.customer_id),

# step 2 ---- find repeat customers from a who placed another order 
# after their first, but within 6 month.
b as (select a.customer_id,count(distinct o.order_purchase_timestamp) as next_order
from a join orders as o 
on a.customer_id=o.customer_id
where o.order_purchase_timestamp > first_order
and o.order_purchase_timestamp < date_add(first_order,interval 6 month)
group by a.customer_id)

# step 3 ---- calculate retention rate of customer
select 100*(count(distinct b.customer_id)/count(distinct a.customer_id)) Retention_Rate
# returning customers (b) / total customers (a) * 100
from a left join b
on a.customer_id=b.customer_id;

#15. Identify the top 3 customers who spent the most money in each year.
select years,customer_id,Most_Money_Spent,d_Rank from (select year(o.order_purchase_timestamp) as Years,o.customer_id, 
round(sum(p.payment_value),0) as Most_Money_Spent,
dense_rank() over (partition by year(o.order_purchase_timestamp) 
order by sum(p.payment_value) desc) as 'd_Rank'
from orders as o join payments as p
on  o.order_id = p.order_id
group by year(o.order_purchase_timestamp),o.customer_id) as d
where d_rank <= 3 ;



